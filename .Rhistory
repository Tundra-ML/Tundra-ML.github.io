WeightvSatel <- ggplot(crabsData, aes(x = y, y = weight))
WeightvSatel + geom_boxplot(fill = "white",position ="dodge") + geom_jitter(aes(color = as.factor(y)),size=2,alpha=0.9)
crabsData$y <- ordered(crabsData$y, levels = c('No Satellite','At least 1 Sattelite'))
WeightvSatel <- ggplot(crabsData, aes(x = y, y = weight))
WeightvSatel + geom_boxplot(fill = "white",position ="dodge") + geom_jitter(aes(color = as.factor(y)),size=2,alpha=0.9)
WeightvSatel <- ggplot(crabsData, aes(x = y, y = weight))
WeightvSatel + geom_boxplot(fill = "white",position ="dodge") + geom_jitter(aes(color = as.factor(y)),height = 2, width=2)
WeightvSatel <- ggplot(crabsData, aes(x = y, y = weight))
WeightvSatel + geom_boxplot(fill = "white",position ="dodge") + geom_jitter(aes(color = as.factor(y)),size =2)
crabsData %>% group_by(colors, y) %.% summarise(Avg = mean(weight), sd = sd(weight), med = median(weight), IQR = IQR(weight))
crabsData %>% group_by(colors, y) %>% summarise(Avg = mean(weight), sd = sd(weight), med = median(weight), IQR = IQR(weight))
crabsData %>% group_by(color, y) %>% summarise(Avg = mean(weight), sd = sd(weight), med = median(weight), IQR = IQR(weight))
crabsData <- read_table("C:/Users/dcraig/Documents/Repos/d-ev-craig.github.io/_HW/HW6 - Summarizing Data/crabs.txt", col_types = list('f','f','d','d','d','f','f'))
crabsData
crabsData <- crabsData[1:6]
levels(crabsData$color) <- c("medium","dark","light","darker")
#crabsData$color <- ordered(crabsData$color, levels = c("light","medium","dark","darker"))
levels(crabsData$spine) <- c("both worn or broken","both good","one worn or broken")
#crabsData$spine <- ordered(crabsData$spine, levels = c("both good","one worn or broken","both worn or broken"))
levels(crabsData$y) <- c("At least 1 Sattelite","No Satellite")
#crabsData$y <- ordered(crabsData$y, levels = c("No Satellite","At least 1 Sattelite"))
crabsData
crabsData %>% group_by(color, y) %>% summarise(Avg = mean(weight), sd = sd(weight), med = median(weight), IQR = IQR(weight))
crabsData
crabsData$color <- ordered(crabsData$color, levels = c('light','medium','dark','darker'))
crabsData %>% group_by(color, y) %>% summarise(Avg = mean(weight), sd = sd(weight), med = median(weight), IQR = IQR(weight))
crabsData$color <- ordered(crabsData$color, levels = c('light','medium','dark','darker'))
crabsData$y <- ordered(crabsData$y, levels = c('No Satellite','At least 1 Sattelite'))
crabsData %>% group_by(color, y) %>% summarise(Avg = mean(weight), sd = sd(weight), med = median(weight), IQR = IQR(weight))
crabsData$color <- ordered(crabsData$color, levels = c('light','medium','dark','darker'))
crabsData$y <- ordered(crabsData$y, levels = c('No Satellite','At least 1 Sattelite'))
crabsData %>% group_by(color, y) %>% summarise(Avg = round(mean(weight)), sd = round(sd(weight)), med = round(median(weight)), IQR = round(IQR(weight)))
WidthvSatel <- ggplot(crabsData, aes(x = y, y = width))
WidthvSatel + geom_boxplot(fill = "white",position ="dodge") + geom_jitter(aes(color = as.factor(y)),size =2)
SpinevColor + geom_bar(aes(fill = as.factor(color)), position = "dodge")+ labs(x = "Female Crab Spine Condition") + scale_x_discrete(labels = c("Both Good","One Worn/Broken","Both Worn/Broken"))+
scale_fill_discrete(name = "",labels = c("light","medium","dark","darker"))+
coord_flip()
WidthvSatel <- ggplot(crabsData, aes(x = y, y = width))
WidthvSatel + geom_boxplot(fill = "white",position ="dodge") + geom_jitter(aes(color = as.factor(y)),size =2)+scale_fill_discrete(name = "y",labels = 'No Satellite','At least 1 Sattelite')
WidthvSatel <- ggplot(crabsData, aes(x = y, y = width))
WidthvSatel + geom_boxplot(fill = "white",position ="dodge") + geom_point(x=y, y = width, aes(color = as.factor(y)),size =2)+scale_fill_discrete(name = "y",labels = 'No Satellite','At least 1 Sattelite')
WidthvSatel <- ggplot(crabsData, aes(x = y, y = width))
WidthvSatel + geom_boxplot(fill = "white",position ="dodge") + geom_point(x=crabsData$y, y = width, aes(color = as.factor(y)),size =2)+scale_fill_discrete(name = "y",labels = 'No Satellite','At least 1 Sattelite')
WidthvSatel <- ggplot(crabsData, aes(x = y, y = width))
WidthvSatel + geom_boxplot(fill = "white",position ="dodge") + geom_point(x=crabsData$y, y = crabsData$width, aes(color = as.factor(y)),size =2)+scale_fill_discrete(name = "y",labels = 'No Satellite','At least 1 Sattelite')
WidthvSatel <- ggplot(crabsData, aes(x = y, y = width))
WidthvSatel + geom_boxplot(fill = "white",position ="dodge") + geom_jitter(aes(color = as.factor(y)),size =2)+scale_fill_discrete(name = "y",labels = 'No Satellite','At least 1 Sattelite')
WidthvSatel <- ggplot(crabsData, aes(x = y, y = width))
WidthvSatel + geom_boxplot(fill = "white",position ="dodge") + geom_jitter(color = as.factor(y), size =2)
WidthvSatel <- ggplot(crabsData, aes(x = y, y = width))
WidthvSatel + geom_boxplot(fill = "white",position ="dodge") + geom_jitter(aes(color = as.factor(y)),size =2)+scale_fill_discrete(name = "y",labels = 'No Satellite','At least 1 Sattelite')
crabsData$y <- ordered(crabsData$y, levels = c('No Satellite','At least 1 Sattelite'))
WeightvSatel <- ggplot(crabsData, aes(x = y, y = weight))
WeightvSatel + geom_boxplot(fill = "white",position ="dodge") + geom_jitter(aes(color = as.factor(y)),size =2)
WidthvSatel <- ggplot(crabsData, aes(x = y, y = width))
WidthvSatel + geom_boxplot(fill = "white",position ="dodge") + geom_jitter(aes(color = as.factor(y)),size =2)+scale_fill_discrete(name = "y",labels = 'No Satellite','At least 1 Sattelite')
git add -a
git add a
git -add a
git add -A
library(Lahman)
newBatting <- Batting %>% as_tibble() %>% select(playerID, teamID, G, AB, R, H, X2B, X3B, HR)
library(tidyverse)
library(Lahman)
newBatting <- Batting %>% as_tibble() %>% select(playerID, teamID, G, AB, R, H, X2B, X3B, HR)
library(Lahman)
newBatting <- Batting %>% as_tibble() %>% select(playerID, teamID, G, AB, R, H, X2B, X3B, HR)
library(lahman)
library(Lahman)
dim(Batting)
newBatting <- Batting %>% as_tibble() %>% select(playerID, teamID, G, AB, R, H, X2B, X3B, HR)
dim(newBatting)
for (i in 3:dim(newBatting)[2]){
print(summary(newBatting{ ,i}))
for (i in 3:dim(newBatting)[2]){
print(summary(newBatting[ ,i])
}
for (i in 3:dim(newBatting)[2])
{
print(summary(newBatting[ ,i])
}
for (i in 3:dim(newBatting)[2]){
print(summary(newBatting[ ,i]))
}
print(newBatting)[-1:-2]
print(newBatting)
knitr::opts_chunk$set(eval = TRUE, echo = TRUE)
library(tidyverse)
install.packages("microbenchmarK")
install.packages("microbenchmark")
knitr::opts_chunk$set(eval = TRUE, echo = TRUE)
library(tidyverse)
library(Lahman)
library(microbenchmark)
Bat <- select(Batting, G:GIDP)
microbenchmark(
colMeans(Bat, na.rm = TRUE)
)
microbenchmark(
for(i in 1:17){
mean(Bat[,i], na.rm = TRUE)
}
)
install.packages("matrixStats")
knitr::opts_chunk$set(eval = TRUE, echo = TRUE)
library(tidyverse)
library(Lahman)
library(microbenchmark)
library(matrixStats)
Batting %>% group_by(playerID) %>%
summarise(totG = sum(G), totAB = sum(AB), totHR = sum(HR)) %>% select(-playerID) %>% as.matrix() %>% colMedians(na.rm = TRUE)
airquality<-as_tibble(airquality)
airquality
status <- vector()
for (i in seq_len(nrow(airquality))){
if(airquality$wind[i] >= 15){
status[i] <- "HighWind"
} else if (airquality$Wind[i] >= 10) {
status[i] <- "Windy"
} else if (airquality$Wind[i] >= 6){
status[i] <- "LightWind"
} else if (airquality$Wind[i] >= 0){
status[i] <- "Error"
}
}
status <- vector()
for (i in seq_len(nrow(airquality))){
if(airquality$Wind[i] >= 15){
status[i] <- "HighWind"
} else if (airquality$Wind[i] >= 10) {
status[i] <- "Windy"
} else if (airquality$Wind[i] >= 6){
status[i] <- "LightWind"
} else if (airquality$Wind[i] >= 0){
status[i] <- "Error"
}
}
status <- vector()
for (i in seq_len(nrow(airquality))){
if(airquality$Wind[i] >= 15){
status[i] <- "HighWind"
} else if (airquality$Wind[i] >= 10) {
status[i] <- "Windy"
} else if (airquality$Wind[i] >= 6){
status[i] <- "LightWind"
} else if (airquality$Wind[i] >= 0){
status[i] <- "Error"
}
}
status
status <- vector()
for (i in seq_len(nrow(airquality))){
if(airquality$Wind[i] >= 15){
status[i] <- "HighWind"
} else if (airquality$Wind[i] >= 10) {
status[i] <- "Windy"
} else if (airquality$Wind[i] >= 6){
status[i] <- "LightWind"
} else if (airquality$Wind[i] >= 0){
status[i] <- "Error"
}
}
head(status)
status <- vector()
for (i in seq_len(nrow(airquality))){
if(airquality$Wind[i] >= 15){
status[i] <- "HighWind"
} else if (airquality$Wind[i] >= 10) {
status[i] <- "Windy"
} else if (airquality$Wind[i] >= 6){
status[i] <- "LightWind"
} else if (airquality$Wind[i] >= 0){
status[i] <- "Error"
}
}
#microbench
loopTime<-microbenchmark(for (i in seq_len(nrow(airquality))){
if(airquality$Wind[i] >= 15){
status[i] <- "HighWind"
} else if (airquality$Wind[i] >= 10) {
status[i] <- "Windy"
} else if (airquality$Wind[i] >= 6){
status[i] <- "LightWind"
} else if (airquality$Wind[i] >= 0){
status[i] <- "Error"
}
}
, unit = 'us')
head(status)
airquality$status <- status
status <- vector()
for (i in seq_len(nrow(airquality))){
if(airquality$Wind[i] >= 15){
status[i] <- "HighWind"
} else if (airquality$Wind[i] >= 10) {
status[i] <- "Windy"
} else if (airquality$Wind[i] >= 6){
status[i] <- "LightWind"
} else if (airquality$Wind[i] >= 0){
status[i] <- "Error"
}
}
#microbench
loopTime<-microbenchmark(for (i in seq_len(nrow(airquality))){
if(airquality$Wind[i] >= 15){
status[i] <- "HighWind"
} else if (airquality$Wind[i] >= 10) {
status[i] <- "Windy"
} else if (airquality$Wind[i] >= 6){
status[i] <- "LightWind"
} else if (airquality$Wind[i] >= 0){
status[i] <- "Error"
}
}
, unit = 'us')
head(status)
airquality$status <- status
loopTime
status <- vector()
for (i in seq_len(nrow(airquality))){
if(airquality$Wind[i] >= 15){
status[i] <- "HighWind"
} else if (airquality$Wind[i] >= 10) {
status[i] <- "Windy"
} else if (airquality$Wind[i] >= 6){
status[i] <- "LightWind"
} else if (airquality$Wind[i] >= 0){
status[i] <- "Error"
}
}
#microbench
loopTime<-microbenchmark(for (i in seq_len(nrow(airquality))){
if(airquality$Wind[i] >= 15){
status[i] <- "HighWind"
} else if (airquality$Wind[i] >= 10) {
status[i] <- "Windy"
} else if (airquality$Wind[i] >= 6){
status[i] <- "LightWind"
} else if (airquality$Wind[i] >= 0){
status[i] <- "Error"
}
}
, unit = 'us')
head(status)
airquality$status <- status
loopTime
vectorTime <- microbenchmark(
ifelse(airquality$Wind >= 15, "HighWind",
ifelse(airquality$Wind >= 10, "Windy",
ifelse(airquality$Wind >= 6, "LightWind","Calm")))
, units = 'us')
vectorTime <- microbenchmark(
ifelse(airquality$Wind >= 15, "HighWind",
ifelse(airquality$Wind >= 10, "Windy",
ifelse(airquality$Wind >= 6, "LightWind","Calm")))
, unit = 'us')
vectorTime <- microbenchmark(
ifelse(airquality$Wind >= 15, "HighWind",
ifelse(airquality$Wind >= 10, "Windy",
ifelse(airquality$Wind >= 6, "LightWind","Calm")))
, unit = 'us')
vectorTime <- microbenchmark(
ifelse(airquality$Wind >= 15, "HighWind",
ifelse(airquality$Wind >= 10, "Windy",
ifelse(airquality$Wind >= 6, "LightWind","Calm")))
, unit = 'us')
vectorTime
apply(X = select(airquality, Ozone:Temp), Margin = 2, FUN = summary, na.rm = TRUE)
apply(X = select(airquality, Ozone:Temp), MARGIN = 2, FUN = summary, na.rm = TRUE)
apply(X = select(airquality, Ozone:Temp), MARGIN = 2,
FUN = function(x) {
temp <- c(mean(x, na.rm = TRUE), sd(x, na.rm = TRUE))
names(temp) <- c("mean", "sd")
temp
}
)
fit <- lm(Ozone ~ Wind, data = airquality)
fit <- list(fit$residuals, fit$effects, fit$fitted.values)
#We now have a list with 3 objects in it
# Lets say we want to find the mean of each list item in fit
lapply(X = fit, FUN = mean)
help(sample)
titanicData
Titanic
titanicData <- Titanic
set.seed(10)
#n for number of obs(rows), k for number of folds
n <- dim(titanicData)[1]; k <-10
# get random reordering of data indices
indices <- sample(n, replace = FALSE) # first n/10 indices are 1st fold, 2nd...
#add column to data frame
titanicData$fold <- vector(mode = "numeric", n)
n
dim(titanicData)
titanicData <- Titanic
set.seed(10)
n <- dim(titanicData)[1]
n
dim(titanicData)
dim(Titanic)
getwd()
getwd()
rmarkdown::render("_Rmd/2022-07-10-Project-2-Blog-Post.Rmd",output_format = md_document("markdown_github"),output_dir = "_posts", output_options = list(keep_html=FALSE))
library(rmarkdown)
rmarkdown::render("_Rmd/2022-07-10-Project-2-Blog-Post.Rmd",output_format = md_document("markdown_github"),output_dir = "_posts", output_options = list(keep_html=FALSE))
rmarkdown::render("_Rmd/2022-07-10-Project-2-Blog-Post.Rmd",output_format = md_document("markdown_github"),output_dir = "_posts", output_options = list(keep_html=FALSE))
rmarkdown::render("_Rmd/2022-07-10-Project-2-Blog-Post.Rmd",output_format = md_document("markdown_github"),output_dir = "_posts", output_options = list(keep_html=FALSE))
getwd()
read_csv("_Projects\Project3\datasets\NPBase")
read_csv("_Projects\\Project3\\datasets\\NPBase")
library(readr)
library(dplyr)
library(randomForest)
library(caret)
read_csv("_Projects\\Project3\\datasets\\NPBase")
read_csv("_Projects\\Project3\\datasets\\NPBase.csv")
data<-read_csv("_Projects\\Project3\\datasets\\NPBase.csv")
getwd()
data<-read_csv("NPBase.csv")
summary(NPBase)
summary(data)
summary(data$win)
summary(data$gold)
sharesHist <- ggplot(data, aes(x=data$win)) +
theme_bw() +                                                                     #Set classic bw plot theme
geom_histogram(color="black", fill = "#34495E", alpha = 0.8, binwidth = 100) +   #Color options, binwidth set to 100 shares
labs(x = "Win Or Lose", y = "Count", title = paste0("Wins vs", data$gold),
subtitle = "of 98th Quantile")
sharesHist <- ggplot(data, aes(x=data$win)) +
theme_bw() +                                                                     #Set classic bw plot theme
geom_histogram(color="black", fill = "#34495E", alpha = 0.8, binwidth = 100) +   #Color options, binwidth set to 100 shares
labs(x = "Win Or Lose", y = "Count", title = paste0("Wins vs", data$gold),
subtitle = "of 98th Quantile") +                                            #Set axis labels
#coord_cartesian(xlim = c(0, sharesStats$q98))                                    #Set x axis limits
disply(sharesHist)
sharesHist <- ggplot(data, aes(x=data$win)) +
theme_bw() +                                                                     #Set classic bw plot theme
geom_histogram(color="black", fill = "#34495E", alpha = 0.8, binwidth = 100) +   #Color options, binwidth set to 100 shares
labs(x = "Win Or Lose", y = "Count", title = paste0("Wins vs", data$gold),
subtitle = "of 98th Quantile") +                                            #Set axis labels
#coord_cartesian(xlim = c(0, sharesStats$q98))                                    #Set x axis limits
display(sharesHist)
sharesHist <- ggplot(data, aes(x=data$win)) +
theme_bw() +                                                                     #Set classic bw plot theme
geom_histogram(color="black", fill = "#34495E", alpha = 0.8, binwidth = 100) +   #Color options, binwidth set to 100 shares
labs(x = "Win Or Lose", y = "Count", title = paste0("Wins vs", data$gold),
subtitle = "of 98th Quantile") +                                            #Set axis labels
#coord_cartesian(xlim = c(0, sharesStats$q98))                                    #Set x axis limits
sharesHist
#coord_cartesian(xlim = c(0, sharesStats$q98))                                    #Set x axis limits
sharesHist
sharesHist <- ggplot(data, aes(x=data$gold)) +
theme_bw() +                                                                     #Set classic bw plot theme
geom_histogram(color="black", fill = "#34495E", alpha = 0.8, binwidth = 100) +   #Color options, binwidth set to 100 shares
labs(x = "Win Or Lose", y = "Count", title = paste0("Wins vs", data$gold),
subtitle = "of 98th Quantile")                                           #Set axis labels
#coord_cartesian(xlim = c(0, sharesStats$q98))
#coord_cartesian(xlim = c(0, sharesStats$q98))                                    #Set x axis limits
sharesHist
varname <- gold
varname <- "gold"
summary(data$varname)
summary(data$gold)
sharesHist <- ggplot(data, aes(x=data$gold)) +
theme_bw() +                                                                     #Set classic bw plot theme
geom_histogram(color="black", fill = "#34495E", alpha = 0.8, binwidth = 100) +   #Color options, binwidth set to 100 shares
labs(x = "Win Or Lose", y = "Count", title = paste0("Counts of" varname),
varname <- "gold"
summary(data$gold)
sharesHist <- ggplot(data, aes(x=data$gold)) +
theme_bw() +                                                                     #Set classic bw plot theme
geom_histogram(color="black", fill = "#34495E", alpha = 0.8, binwidth = 100) +   #Color options, binwidth set to 100 shares
labs(x = "Win Or Lose", y = "Count", title = paste0("Counts of", varname))
sharesHist
polarityPlot <- ggplot(data = data, aes(x = gold)) +
geom_point(aes(colour = gold), alpha = 0.4) +  #Set fill by polarity
theme_bw() +                                                       #Set classic bw plot theme
coord_cartesian(ylim = c(0, 50000), xlim = c(-1,1)) +              #Set axis limits
xlab("Sentiment Polarity") + ylab("# Shares") +                    #Label axis
ggtitle("Shares Across Sentiment Polarity Scale") +                #Set title
scale_colour_gradientn("Sentiment Polarity",                       #Set legend title
colors = c("#F31C10","#F1C40F", "#2BCF0E"), #Set colors for x-axis gradient
limits = c(-1,1))
polarityPlot
DayPlot <- ggplot(DayData, aes(x=win,y=gold), fill = gold)) +
DayPlot <- ggplot(DayData, aes(x=win,y=gold), fill = gold) +
theme_bw() +                                                              #Set classic bw plot theme
geom_hline(yintercept = median(data$gold), size = 0.8) +             #Add line for overall median shares
geom_point(size = 0.8) +                                                  #Add points
geom_boxplot(lwd = 0.5, width = 0.5, outlier.size = 0.8, alpha = 0.7) +   #Create boxplot
xlab("") + ylab("# Shares") +                                             #Label axis
theme(legend.position = "none") +                                         #Remove legend
ggtitle("Daily News Shares") +                                            #Set title
scale_color_startrek() + scale_fill_startrek()                            #Set color theme
DayPlot <- ggplot(data, aes(x=win,y=gold), fill = gold) +
theme_bw() +                                                              #Set classic bw plot theme
geom_hline(yintercept = median(data$gold), size = 0.8) +             #Add line for overall median shares
geom_point(size = 0.8) +                                                  #Add points
geom_boxplot(lwd = 0.5, width = 0.5, outlier.size = 0.8, alpha = 0.7) +   #Create boxplot
xlab("") + ylab("# Shares") +                                             #Label axis
theme(legend.position = "none") +                                         #Remove legend
ggtitle("Daily News Shares") +                                            #Set title
scale_color_startrek() + scale_fill_startrek()                            #Set color theme
library(gbm)
library(ggsci)
DayPlot <- ggplot(data, aes(x=win,y=gold), fill = gold) +
theme_bw() +                                                              #Set classic bw plot theme
geom_hline(yintercept = median(data$gold), size = 0.8) +             #Add line for overall median shares
geom_point(size = 0.8) +                                                  #Add points
geom_boxplot(lwd = 0.5, width = 0.5, outlier.size = 0.8, alpha = 0.7) +   #Create boxplot
xlab("") + ylab("# Shares") +                                             #Label axis
theme(legend.position = "none") +                                         #Remove legend
ggtitle("Daily News Shares") +                                            #Set title
scale_color_startrek() + scale_fill_startrek()                            #Set color theme
#Display plot
DayPlot
DayPlot <- ggplot(data, aes(x=win,y=gold), fill = gold) +
theme_bw() +                                                              #Set classic bw plot theme
geom_hline(yintercept = median(data$gold), size = 0.8) +             #Add line for overall median shares
geom_point(size = 0.8) +                                                  #Add points
geom_boxplot(lwd = 0.5, width = 0.5, outlier.size = 0.8, alpha = 0.7) +   #Create boxplot
xlab("") + ylab("Amount of Gold") +                                             #Label axis
theme(legend.position = "none") +                                         #Remove legend
ggtitle(pasteo("Wins vs ", varname)) +                                            #Set title
scale_color_startrek() + scale_fill_startrek()                            #Set color theme
DayPlot <- ggplot(data, aes(x=win,y=gold), fill = gold) +
theme_bw() +                                                              #Set classic bw plot theme
geom_hline(yintercept = median(data$gold), size = 0.8) +             #Add line for overall median shares
geom_point(size = 0.8) +                                                  #Add points
geom_boxplot(lwd = 0.5, width = 0.5, outlier.size = 0.8, alpha = 0.7) +   #Create boxplot
xlab("") + ylab("Amount of Gold") +                                             #Label axis
theme(legend.position = "none") +                                         #Remove legend
ggtitle(paste0("Wins vs ", varname)) +                                            #Set title
scale_color_startrek() + scale_fill_startrek()                            #Set color theme
#Display plot
DayPlot
shiny::runApp('Project3DotaNP')
runApp('Project3DotaNP')
runApp('Project3DotaNP')
data<-read_csv("_Projects\\Project3\\datasets\\NPBase.csv")
runApp('Project3DotaNP')
data<- reactive({read_csv("_Projects\\Project3\\datasets\\NPBase.csv")})
runApp('Project3DotaNP')
runApp('Project3DotaNP')
runApp('Project3DotaNP')
runApp('Project3DotaNP')
data<- read_csv("_Projects\\Project3\\datasets\\NPBase.csv")
runApp('Project3DotaNP')
runApp('Project3DotaNP')
runApp('Project3DotaNP')
newData <- reactive({
data
})
runApp('Project3DotaNP')
runApp('Project3DotaNP')
runApp('Project3DotaNP')
runApp('Project3DotaNP')
runApp('Project3DotaNP')
runApp('Project3DotaNP')
runApp('Project3DotaNP')
runApp('TabsetEx')
runApp('TabsetEx')
runApp('Project3DotaNP')
runApp('Project3DotaNP')
runApp('Project3DotaNP')
runApp('Project3DotaNP')
runApp('Project3DotaNP')
#
# This is the user-interface definition of a Shiny web application. You can
# run the application by clicking 'Run App' above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shinythemes)
runApp('Project3DotaNP')
runApp('Project3DotaNP')
runApp('Project3DotaNP')
runApp('Project3DotaNP')
runApp('Project3DotaNP')
runApp('Project3DotaNP')
runApp('Project3DotaNP')
runApp('Project3DotaNP')
runApp('Project3DotaNP')
runApp('Project3DotaNP')
runApp('Project3DotaNP')
runApp('Project3DotaNP')
runApp('Project3DotaNP')
varname <- "gold"
summary(data$gold)
varHist <- ggplot(data, aes(x=data$gold)) +
theme_bw() +                                                                     #Set classic bw plot theme
geom_histogram(color="black", fill = "#34495E", alpha = 0.8, binwidth = 100) +   #Color options, binwidth set to 100 shares
labs(x = "Win Or Lose", y = "Count", title = paste0("Counts of ", varname))
varHist
boxPlot <- ggplot(data, aes(x=win,y=gold), fill = gold) +
theme_bw() +                                                              #Set classic bw plot theme
geom_hline(yintercept = median(data$gold), size = 0.8) +             #Add line for overall median shares
geom_point(size = 0.8) +                                                  #Add points
geom_boxplot(lwd = 0.5, width = 0.5, outlier.size = 0.8, alpha = 0.7) +   #Create boxplot
xlab("") + ylab("Amount of Gold") +                                             #Label axis
theme(legend.position = "none") +                                         #Remove legend
ggtitle(paste0("Wins vs ", varname)) +                                            #Set title
scale_color_startrek() + scale_fill_startrek()                            #Set color theme
#Display plot
boxPlot
npData<- read_csv("..\\_Projects\\Project3\\datasets\\NPBase.csv")
npData<- read_csv("\\_Projects\\Project3\\datasets\\NPBase.csv")
runApp('Project3DotaNP')
shiny::runApp('Project3DotaNP')
q()
